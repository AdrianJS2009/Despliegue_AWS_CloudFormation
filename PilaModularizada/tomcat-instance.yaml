AWSTemplateFormatVersion: 2010-09-09
Description: Stack de Instancia Tomcat

Parameters:
  InstanceName:
    Description: Nombre de la instancia
    Type: String
    MinLength: 5

  AMI:
    Description: ID de la AMI de la instancia
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id

  VPC:
    Description: VPC donde se creara la instancia
    Type: AWS::EC2::VPC::Id

  InstanceType:
    Description: Tipo de instancia
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.nano
      - t2.large

Resources:
  TomcatInstance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Ref InstanceName
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: vockey
      SecurityGroupIds:
        - Fn::ImportValue: SecurityGroupTomcat
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /tmp/userdata.log 2>&1
          #====================================================================#
          # PREPARAR BOOTSTRAP DE CFN HELPER SCRIPTS
          #====================================================================#
          apt update -y
          apt install python3-pip -y
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          #====================================================================#
          #!/bin/bash

          sudo sed -i 's/^\$nrconf{restart} = "i";/\$nrconf{restart} = "a";/' /etc/needrestart/needrestart.conf
          sudo sed -i 's/^\$nrconf{kernelhints} = -1;/\$nrconf{kernelhints} = -1;/' /etc/needrestart/needrestart.conf
          sudo sed -i 's/^\$nrconf{checks} = 1;/\$nrconf{checks} = 0;/' /etc/needrestart/needrestart.conf

          useradd -m -d /opt/tomcat -U -s /bin/false tomcat

          apt update
          apt upgrade -y
          apt install openjdk-21-jdk -y

          cd /tmp

          wget https://dlcdn.apache.org/tomcat/tomcat-11/v11.0.2/bin/apache-tomcat-11.0.2.tar.gz
          tar xzvf apache-tomcat-11*tar.gz -C /opt/tomcat --strip-components=1

          chown -R tomcat:tomcat /opt/tomcat/
          chmod -R u+x /opt/tomcat/bin

          sed -i '/<\/tomcat-users>/i \
          <role rolename="manager-gui" />\n<user username="manager" password="manager_password" roles="manager-gui" />\n<role rolename="admin-gui" />\n<user username="admin" password="admin_password" roles="manager-gui,admin-gui" />' /opt/tomcat/conf/tomcat-users.xml

          sed -i '/<Valve /,/\/>/ s|<Valve|<!--<Valve|; /<Valve /,/\/>/ s|/>|/>-->|' /opt/tomcat/webapps/manager/META-INF/context.xml
          sed -i '/<Valve /,/\/>/ s|<Valve|<!--<Valve|; /<Valve /,/\/>/ s|/>|/>-->|' /opt/tomcat/webapps/host-manager/META-INF/context.xml

          echo '[Unit]
          Description=Tomcat
          After=network.target

          [Service]
          Type=forking

          User=tomcat
          Group=tomcat

          Environment="JAVA_HOME=/usr/lib/jvm/java-1.21.0-openjdk-amd64"
          Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
          Environment="CATALINA_BASE=/opt/tomcat"
          Environment="CATALINA_HOME=/opt/tomcat"
          Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"
          Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

          ExecStart=/opt/tomcat/bin/startup.sh
          ExecStop=/opt/tomcat/bin/shutdown.sh

          RestartSec=10
          Restart=always

          [Install]
          WantedBy=multi-user.target' | sudo tee /etc/systemd/system/tomcat.service

          systemctl daemon-reload
          systemctl start tomcat
          systemctl enable tomcat

          echo "Clonando repositorio..."
          chmod 777 /opt
          cd /opt
          git clone https://github.com/DavidHormigoRamirez/studentify.git || { echo "Error al clonar"; exit 1; }
          cd studentify

          chmod +x gradlew
          ./gradlew build || { echo "Error en Gradle Build"; exit 1; }

          echo "Desplegando aplicación..."
          cp build/libs/studentify-1.0.0.war /opt/tomcat/webapps/studentify.war || { echo "Error al copiar .war"; exit 1; }
          chown tomcat:tomcat /opt/tomcat/webapps/studentify.war

          systemctl restart tomcat
          sleep 10

          ls -l /opt/tomcat/webapps/ >> /tmp/userdata.log

          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource InstanciaEC2 --region ${AWS::Region}

          echo "Finalizando configuración."

Outputs:
  TomcatInstancePrivateIP:
    Description: IP privada de la instancia Tomcat
    Value: !GetAtt TomcatInstance.PrivateIp
    Export:
      Name: TomcatInstancePrivateIP

  TomcatHealthCheckURL:
    Description: URL del endpoint de Health Check
    Value:
      !Join [
        "",
        [
          "http://",
          !GetAtt TomcatInstance.PrivateIp,
          ":8080/studentify/api/health",
        ],
      ]
